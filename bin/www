#!/usr/bin/env node

/**
 * Module dependencies.
 */

const express = require("express");
const { ApolloServer } = require("@apollo/server");
const { expressMiddleware } = require("@apollo/server/express4");
const { startStandaloneServer } = require("@apollo/server/standalone");
const cors = require("cors");
const http = require("http");
const typeDefs = require("../graphql/schemas/index");
const resolvers = require("../graphql/resolvers/index");

/**
 * Create an Express application.
 */

const app = express();

/**
 * Create an Apollo Server instance.
 */

const server = new ApolloServer({
  typeDefs,
  resolvers,
});

/**
 * Start the Apollo Server.
 */

async function startServer() {
  await server.start();

  // Use Apollo Server middleware
  app.use("/graphql", cors(), express.json(), expressMiddleware(server));

  // Create and start the HTTP server
  const httpServer = http.createServer(app);
  const port = normalizePort(process.env.PORT || "3000");
  httpServer.listen(port, () => {
    console.log(`ðŸš€ Server ready at http://localhost:${port}/graphql`);
  });
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);
  if (isNaN(port)) {
    // named pipe
    return val;
  }
  if (port >= 0) {
    // port number
    return port;
  }
  return false;
}

// Start the server
startServer().catch((error) => {
  console.error("Error starting server:", error);
  process.exit(1);
});
